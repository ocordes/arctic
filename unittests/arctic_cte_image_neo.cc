//#define BOOST_TEST_MODULE strstr

#include <boost/test/unit_test.hpp>

#include <iostream>
#include <iomanip>

#include "cte_image_neo.hh"
#include "params.hh"
#include "params_acs.hh"
#include "output.hh"

// written by: Oliver Cordes 2017-06-01
// changed by: Oliver Cordes 2017-07-10


bool check_array( std::valarray<double> & a, std::valarray<double> & b, double limits )
{
  for (unsigned int i=0; i<a.size();++i)
  {
    if ( fabs( a[i] - b[i] ) > limits )
    {
      std::cout << std::fixed << std::setprecision(9)
                << "Error in array [" << i << "]: a=" << a[i] <<  " b=" << b[i]
                << " diff=" << fabs( a[i] - b[i] ) << " limits=" << limits << std::endl;
      return false;
    }
  }

  return true;
}


BOOST_AUTO_TEST_SUITE( cte_mage_neo_test_suite )

BOOST_AUTO_TEST_CASE( constructor )
{
  cte_image_neo im;

  //BOOST_CHECK_EQUAL( im.prgname, "Program_name_test" );
}

// check the following parameters
//  - unclocking
//  - no rotation
//  - express = 1
//  - n_iteration = 1
//  - cut_upper_limits = false
//  - high signal to noise
//  - dark_mode = false
//  - charge_injection = false
BOOST_AUTO_TEST_CASE( correction1 )
{
   std::shared_ptr<params_acs> p = std::shared_ptr<params_acs>( new params_acs() );

   double jd = +2452334.5 + 3506.238668981474;

   p->calc_trap_config( jd );

   cte_image_neo im( (std::shared_ptr<params> &) p );

   std::valarray<double> in_data =  { 40.787811279, 42.996334076, 36.101192474,
                                      34.036590576, 28.182380676, 33.998012543,
                                      16.299722672, 32.821144104, 30.215837479,
                                      30.543056488 };
   std::valarray<double> out_data = { 40.837474823, 43.048473358, 36.146598816,
                                      34.080699921, 28.220380783, 34.049839020,
                                      16.316484451, 32.891876221, 30.255695343,
                                      30.585535049 };


   im.setup( 1, in_data.size() );
   im.clock_charge( in_data );

   BOOST_CHECK_EQUAL( check_array( in_data, out_data, 1e-5), true );
}

// check the following parameters
//  - unclocking
//  - no rotation
//  - direction forward
//  - express = 1
//  - n_iteration = 1
//  - cut_upper_limits = false
//  - low signal to noise
//  - dark_mode = false
//  - charge_injection = false
BOOST_AUTO_TEST_CASE( correction2 )
{
   std::shared_ptr<params_acs> p = std::shared_ptr<params_acs>( new params_acs() );

   //double jd = +2452334.5 + 3506.238668981474;
   double jd = +2452334.5 + 2786.02;

   p->calc_trap_config( jd );

   cte_image_neo im( (std::shared_ptr<params> &) p );

   std::valarray<double> in_data =  { 0.008679612, 0.002772796, 0.001571912, 0.001605783,
                                      0.000871051, 0.001173347, 0.001275275, 0.000993010,
                                      -0.000350387, 0.003193463, 0.018024899, 0.014778999,
                                      0.002280427, 0.001436972, 0.000917238, 0.006845565,
                                      0.004871908, 0.291465133, 0.003689340, 0.020187818,
                                      0.002238023, 0.003081655, 0.000947794, 0.000270663,
                                      -0.000422476, 0.002363467, 0.001035341, 0.028084122,
                                      0.006980744, 0.003283431, 0.007109892, 0.003935513,
                                      0.000978794, -0.000460752, -0.001094718, 0.001689621,
                                      0.002342759, 0.007524569, 0.000076040, 0.001714738,
                                      0.000504006, 0.007206579, 0.000830590, 0.012597033,
                                      0.002316516, 0.012605761, 0.015178495, 0.003467531,
                                      0.000858165, 0.002558219, 0.002378170, 0.002249520,
                                      0.001153489, -0.000369282, 0.002616879, 0.001682350,
                                      0.002737300, 0.004039197, 0.015030440, 0.000175450,
                                      0.001274341, 0.008631511, 0.004427247, 0.002912365,
                                      0.001941754, 0.002695119, 0.001299986, 0.000986228,
                                      0.000801815, 0.000617397, 0.002942618, 0.026314680,
                                      0.008317295, 0.000036347, 0.014502814, 0.001302069,
                                      0.002505186, 0.067330942, 0.003535634, 0.000450654 };

   std::valarray<double> out_data = { 0.009424694, 0.003115607, 0.001802142, 0.001963123,
                                      0.001051654, 0.001478778, 0.001716571, 0.001196603,
                                      -0.000469148, 0.005556351, 0.024765190, 0.015526458,
                                      0.001667337, 0.001063919, 0.000727044, 0.009214219,
                                      0.005197967, 0.346392241, -0.005171691, 0.018469184,
                                      -0.001660591, 0.000416505, -0.001410909, -0.001998813,
                                      -0.002294084, 0.002223993, -0.000516971, 0.040910933,
                                      0.004549861, 0.001265894, 0.007010214, 0.002640427,
                                      -0.000731729, -0.002146611, -0.002358554, 0.002252047,
                                      0.002123638, 0.012249101, -0.001816263, 0.001202978,
                                      -0.000300440, 0.011447032, -0.000700869, 0.020856006,
                                      0.000491963, 0.017139437, 0.019917083, 0.001435274,
                                      -0.001097397, 0.002108015, 0.001904715, 0.001896253,
                                      0.000602449, -0.001489135, 0.003961337, 0.001623183,
                                      0.004253726, 0.007371266, 0.028278507, -0.002527334,
                                      0.000005146, 0.012300347, 0.003748590, 0.002129830,
                                      0.001444138, 0.002909304, 0.001081251, 0.000614425,
                                      0.000574376, 0.000535724, 0.005696510, 0.060418145,
                                      0.010415723, -0.002959106, 0.021258633, -0.001940383,
                                      0.001265823, 0.131244462, -0.006473487, -0.006508577 };


   im.setup( 1, in_data.size() );
   //debug_level = 10;
   im.clock_charge( in_data );

   //for (unsigned int i=0;i<in_data.size();++i)
   // std::cout << std::fixed << std::setprecision(9) << in_data[i] << ", ";
   // std::cout << std::endl;

   BOOST_CHECK_EQUAL( check_array( in_data, out_data, 1e-9), true );
}

// check the following parameters
//  - unclocking
//  - no rotation
//  - direction forward
//  - express = 2
//  - n_iteration = 1
//  - cut_upper_limits = false
//  - high signal to noise
//  - dark_mode = false
//  - charge_injection = false
BOOST_AUTO_TEST_CASE( correction3 )
{
   std::shared_ptr<params_acs> p = std::shared_ptr<params_acs>( new params_acs() );

   double jd = +2452334.5 + 3506.238668981474;

   p->calc_trap_config( jd );
   p->express = 2;

   cte_image_neo im( (std::shared_ptr<params> &) p );

   std::valarray<double> in_data =  { 40.787811279, 42.996334076, 36.101192474,
                                      34.036590576, 28.182380676, 33.998012543,
                                      16.299722672, 32.821144104, 30.215837479,
                                      30.543056488 };
   std::valarray<double> out_data = { 40.837473022, 43.048471768, 36.146600649,
                                      34.080700008, 28.220381106, 34.049782566,
                                      16.316478661, 32.891877879, 30.255686015,
                                      30.585298936 };


   im.setup( 1, in_data.size() );
   im.clock_charge( in_data );

   //for (unsigned int i=0;i<in_data.size();++i)
   // std::cout << std::fixed << std::setprecision(9) << in_data[i] << ", ";
   //  std::cout << std::endl;

   BOOST_CHECK_EQUAL( check_array( in_data, out_data, 1e-5), true );
}

// check the following parameters
//  - unclocking
//  - no rotation
//  - direction forward
//  - express = 1
//  - n_iteration = 2
//  - cut_upper_limits = false
//  - high signal to noise
//  - dark_mode = false
//  - charge_injection = false
BOOST_AUTO_TEST_CASE( correction4 )
{
   std::shared_ptr<params_acs> p = std::shared_ptr<params_acs>( new params_acs() );

   double jd = +2452334.5 + 3506.238668981474;

   p->calc_trap_config( jd );
   p->n_iterations = 2;

   cte_image_neo im( (std::shared_ptr<params> &) p );

   std::valarray<double> in_data =  { 40.787811279, 42.996334076, 36.101192474,
                                      34.036590576, 28.182380676, 33.998012543,
                                      16.299722672, 32.821144104, 30.215837479,
                                      30.543056488 };
   std::valarray<double> out_data = { 40.837501130, 43.048501035, 36.146615364,
                                      34.080782796, 28.220381260, 34.049929440,
                                      16.316462451, 32.891906847, 30.255679496,
                                      30.585625441 };


   im.setup( 1, in_data.size() );
   im.clock_charge( in_data );

  //  for (unsigned int i=0;i<in_data.size();++i)
  //    std::cout << std::fixed << std::setprecision(9) << in_data[i] << ", ";
  //  std::cout << std::endl;

   BOOST_CHECK_EQUAL( check_array( in_data, out_data, 1e-5), true );
}

// check the following parameters
//  - unclocking
//  - no rotation
//  - direction forward
//  - express = 1
//  - n_iteration = 1
//  - cut_upper_limits = true limits=40.0
//  - high signal to noise
//  - dark_mode = false
//  - charge_injection = false
BOOST_AUTO_TEST_CASE( correction5 )
{
   std::shared_ptr<params_acs> p = std::shared_ptr<params_acs>( new params_acs() );

   double jd = +2452334.5 + 3506.238668981474;

   p->calc_trap_config( jd );
   p->cut_upper_limit = true;
   p->upper_limit = 40.0;

   cte_image_neo im( (std::shared_ptr<params> &) p );

   std::valarray<double> in_data =  { 40.787811279, 42.996334076, 36.101192474,
                                      34.036590576, 28.182380676, 33.998012543,
                                      16.299722672, 32.821144104, 30.215837479,
                                      30.543056488 };
   std::valarray<double> out_data = { 40.000000000, 40.000000000, 36.146598816,
                                      34.080699921, 28.220380783, 34.049839020,
                                      16.316484451, 32.891876221, 30.255695343,
                                      30.585535049 };


   im.setup( 1, in_data.size() );
   im.clock_charge( in_data );

   BOOST_CHECK_EQUAL( check_array( in_data, out_data, 1e-5), true );
}

// check the following parameters
//  - unclocking
//  - rotation,
//  - direction forward
//  - express = 1
//  - n_iteration = 1
//  - cut_upper_limits = false
//  - high signal to noise
//  - dark_mode = false
//  - charge_injection = false
BOOST_AUTO_TEST_CASE( correction6 )
{
   std::shared_ptr<params_acs> p = std::shared_ptr<params_acs>( new params_acs() );

   double jd = +2452334.5 + 3506.238668981474;

   p->calc_trap_config( jd );
   p->rotate = true;

   cte_image_neo im( (std::shared_ptr<params> &) p );

   std::valarray<double> in_data =  { 40.787811279, 42.996334076, 36.101192474,
                                      34.036590576, 28.182380676, 33.998012543,
                                      16.299722672, 32.821144104, 30.215837479,
                                      30.543056488 };
   std::valarray<double> out_data = { 40.837474823, 43.048473358, 36.146598816,
                                      34.080699921, 28.220380783, 34.049839020,
                                      16.316484451, 32.891876221, 30.255695343,
                                      30.585535049 };


   im.setup( in_data.size(), 1 );
   im.clock_charge( in_data );

   BOOST_CHECK_EQUAL( check_array( in_data, out_data, 1e-5), true );
}

// check the following parameters
//  - unclocking
//  - no rotation
//  - direction forward
//  - express = 1
//  - n_iteration = 1
//  - cut_upper_limits = false
//  - low signal to noise
//  - dark_mode = true
//  - charge_injection = false
BOOST_AUTO_TEST_CASE( correction7 )
{
   std::shared_ptr<params_acs> p = std::shared_ptr<params_acs>( new params_acs() );

   //double jd = +2452334.5 + 3506.238668981474;
   double jd = +2452334.5 + 2786.02;

   p->calc_trap_config( jd );
   p->dark_mode = true;

   cte_image_neo im( (std::shared_ptr<params> &) p );

   std::valarray<double> in_data =  { 0.008679612, 0.002772796, 0.001571912, 0.001605783,
                                      0.000871051, 0.001173347, 0.001275275, 0.000993010,
                                      -0.000350387, 0.003193463, 0.018024899, 0.014778999,
                                      0.002280427, 0.001436972, 0.000917238, 0.006845565,
                                      0.004871908, 0.291465133, 0.003689340, 0.020187818,
                                      0.002238023, 0.003081655, 0.000947794, 0.000270663,
                                      -0.000422476, 0.002363467, 0.001035341, 0.028084122,
                                      0.006980744, 0.003283431, 0.007109892, 0.003935513,
                                      0.000978794, -0.000460752, -0.001094718, 0.001689621,
                                      0.002342759, 0.007524569, 0.000076040, 0.001714738,
                                      0.000504006, 0.007206579, 0.000830590, 0.012597033,
                                      0.002316516, 0.012605761, 0.015178495, 0.003467531,
                                      0.000858165, 0.002558219, 0.002378170, 0.002249520,
                                      0.001153489, -0.000369282, 0.002616879, 0.001682350,
                                      0.002737300, 0.004039197, 0.015030440, 0.000175450,
                                      0.001274341, 0.008631511, 0.004427247, 0.002912365,
                                      0.001941754, 0.002695119, 0.001299986, 0.000986228,
                                      0.000801815, 0.000617397, 0.002942618, 0.026314680,
                                      0.008317295, 0.000036347, 0.014502814, 0.001302069,
                                      0.002505186, 0.067330942, 0.003535634, 0.000450654 };

   std::valarray<double> out_data = { 0.009424694, 0.003115607, 0.001802142, 0.001963123,
                                      0.001051654, 0.001478778, 0.001716571, 0.001196603,
                                      -0.000469148, 0.005556351, 0.024765190, 0.015526458,
                                      0.001667337, 0.001063919, 0.000727044, 0.009214219,
                                      0.005197967, 0.346392241, -0.005171691, 0.018469184,
                                      -0.001660591, 0.000416505, -0.001410909, -0.001998813,
                                      -0.002294084, 0.002223993, -0.000516971, 0.040910933,
                                      0.004549861, 0.001265894, 0.007010214, 0.002640427,
                                      -0.000731729, -0.002146611, -0.002358554, 0.002252047,
                                      0.002123638, 0.012249101, -0.001816263, 0.001202978,
                                      -0.000300440, 0.011447032, -0.000700869, 0.020856006,
                                      0.000491963, 0.017139437, 0.019917083, 0.001435274,
                                      -0.001097397, 0.002108015, 0.001904715, 0.001896253,
                                      0.000602449, -0.001489135, 0.003961337, 0.001623183,
                                      0.004253726, 0.007371266, 0.028278507, -0.002527334,
                                      0.000005146, 0.012300347, 0.003748590, 0.002129830,
                                      0.001444138, 0.002909304, 0.001081251, 0.000614425,
                                      0.000574376, 0.000535724, 0.005696510, 0.060418145,
                                      0.010415723, -0.002959106, 0.021258633, -0.001940383,
                                      0.001265823, 0.131244462, -0.006473487, -0.006508577 };


   im.setup( 1, in_data.size() );

   im.clock_charge( in_data );

   //for (unsigned int i=0;i<in_data.size();++i)
   // std::cout << std::fixed << std::setprecision(9) << in_data[i] << ", ";
   // std::cout << std::endl;

   BOOST_CHECK_EQUAL( check_array( in_data, out_data, 1e-9), true );
}

// check the following parameters
//  - clocking !!
//  - no rotation
//  - direction forward
//  - express = 1
//  - n_iteration = 1
//  - cut_upper_limits = false
//  - high signal to noise
//  - dark_mode = false
//  - charge_injection = false
BOOST_AUTO_TEST_CASE( correction8 )
{
   std::shared_ptr<params_acs> p = std::shared_ptr<params_acs>( new params_acs() );

   double jd = +2452334.5 + 3506.238668981474;

   p->calc_trap_config( jd );
   p->unclock = false;

   cte_image_neo im( (std::shared_ptr<params> &) p );

   std::valarray<double> in_data =  { 40.787811279, 42.996334076, 36.101192474,
                                      34.036590576, 28.182380676, 33.998012543,
                                      16.299722672, 32.821144104, 30.215837479,
                                      30.543056488 };
   std::valarray<double> out_data = { 40.738149536, 42.944196384, 36.055784299,
                                      33.992481144, 28.144380246, 33.946186471,
                                      16.282960644, 32.750412090, 30.175979848,
                                      30.500577444 };

   im.setup( 1, in_data.size() );
   im.clock_charge( in_data );

   //for (unsigned int i=0;i<in_data.size();++i)
   //    std::cout << std::fixed << std::setprecision(9) << in_data[i] << ", ";
   //std::cout << std::endl;

   BOOST_CHECK_EQUAL( check_array( in_data, out_data, 1e-5), true );
}

// check the following parameters
//  - unclocking
//  - no rotation
//  - direction forward
//  - express = 1
//  - n_iteration = 1
//  - cut_upper_limits = false
//  - high signal to noise
//  - dark_mode = false
//  - charge_injection = true
BOOST_AUTO_TEST_CASE( correction9 )
{
   std::shared_ptr<params_acs> p = std::shared_ptr<params_acs>( new params_acs() );

   double jd = +2452334.5 + 3506.238668981474;

   p->calc_trap_config( jd );
   p->charge_injection = true;

   cte_image_neo im( (std::shared_ptr<params> &) p );

   std::valarray<double> in_data =  { 40.787811279, 42.996334076, 36.101192474,
                                      34.036590576, 28.182380676, 33.998012543,
                                      16.299722672, 32.821144104, 30.215837479,
                                      30.543056488 };
   std::valarray<double> out_data = { 41.284428712, 43.257230766, 36.252612097,
                                      34.147057329, 28.258376265, 34.084410669,
                                      16.323671029, 32.909526774, 30.260113700,
                                      30.585518508 };

   im.setup( 1, in_data.size() );
   im.clock_charge( in_data );

   //for (unsigned int i=0;i<in_data.size();++i)
   //  std::cout << std::fixed << std::setprecision(9) << in_data[i] << ", ";
   //  std::cout << std::endl;

   BOOST_CHECK_EQUAL( check_array( in_data, out_data, 1e-5), true );
}


// check the following parameters
//  - unclocking
//  - no rotation
//  - direction forward
//  - express = 1
//  - n_iteration = 1
//  - cut_upper_limits = false
//  - high signal to noise, bright event
//  - dark_mode = false
//  - charge_injection = true
BOOST_AUTO_TEST_CASE( correction10 )
{
   std::shared_ptr<params_acs> p = std::shared_ptr<params_acs>( new params_acs() );

   double jd = +2452334.5 + 3506.238668981474;

   p->calc_trap_config( jd );

   cte_image_neo im( (std::shared_ptr<params> &) p );

   std::valarray<double> in_data =  { 40.787811279, 120000.0, 120000.0,
                                      34.036590576, 28.182380676, 33.998012543,
                                      16.299722672, 32.821144104, 30.215837479,
                                      30.543056488 };
   std::valarray<double> out_data = { 40.837473022, 120003.414683020, 120001.732172381,
                                      33.119263331, 27.763327651, 33.744942012,
                                      16.070829714, 32.678333195, 30.065647447,
                                      30.414540508 };

   im.setup( 1, in_data.size() );
   //debug_level = 11;
   im.clock_charge( in_data );

   for (unsigned int i=0;i<in_data.size();++i)
     std::cout << std::fixed << std::setprecision(9) << in_data[i] << ", ";
   std::cout << std::endl;

   BOOST_CHECK_EQUAL( check_array( in_data, out_data, 1e-5), true );
}

// check the following parameters
//  - unclocking
//  - no rotation
//  - direction forward
//  - express = 1
//  - n_iteration = 1
//  - cut_upper_limits = false
//  - low signal to noise, special code variants
//  - dark_mode = false
//  - charge_injection = true
BOOST_AUTO_TEST_CASE( correction11 )
{
   std::shared_ptr<params_acs> p = std::shared_ptr<params_acs>( new params_acs() );

   double jd = +2452334.5 + 3506.238668981474;

   p->calc_trap_config( jd );

   cte_image_neo im( (std::shared_ptr<params> &) p );

   std::valarray<double> in_data =  { 0.004847145, 0.007732007, 0.049510635, 0.001067913,
                                      -0.000247162, 0.004337602, 0.000981794, 0.051919892,
                                      0.070345663, 0.001538368, -0.000202273, 0.000871166,
                                      0.155586869, 0.003494894, 0.002256593, 0.001744395,
                                      0.000661402, 0.009931946, 0.002196539, 0.013683222,
                                      0.036975451, 0.002516039, 0.003738527, 0.002773253,
                                      0.001002239, 0.000693295, -0.000938984, -0.000618278,
                                      0.011617737, 0.001937658, 0.008678678, 0.007352134,
                                      0.000139693, 0.014240431, 0.000268426, 0.008837313,
                                      0.001986295, 0.006124885, 0.001527711, 0.001858454,
                                      0.001613897, 0.001934602, 0.000378626, 0.001147790,
                                      0.002633431, 0.003398345, 0.002276022, 0.001221071,
                                      0.006977582, 0.001772739, -0.000915429, -0.000717383,
                                      0.001644378, -0.000545463, 0.001065807, 0.006671304,
                                      0.001860488, 0.003095792, 0.000336742, 0.003551366,
                                      0.002869807, 0.002044313, 0.001553043, 0.001573025,
                                      -0.000123282, 0.000719514, 0.001478606, 0.000789685,
                                      0.001495496, -0.000376881, 0.001774460, 0.003151278,
                                      0.000628104, -0.000022347, 0.002160625, 0.002235872,
                                      0.001804197, -0.000969985, 0.001718188, 0.020882064,
                                      -0.000664237, 0.000779585, 0.006775280, 0.002218873,
                                      0.000667147, 0.210815251, 0.000818127, 0.004492437,
                                      -0.000267817, 0.016790701, 0.001635913, 0.013963045,
                                      0.000259228, 0.001222858, 0.001099764, 0.010309614,
                                      0.012230949, 0.001975680, 0.048239432, 0.018518399,
                                      0.001666809, 0.007671276, 0.001142575, -0.000021272,
                                      0.002129643, 0.000372453, 0.008304017, 0.004156272,
                                      0.000114049, 0.000971994, 0.000004171, 0.001553022,
                                      -0.000251963, 0.002336544, 0.000963997, 0.002047168,
                                      0.001900077, 0.002658057, 0.000768963, 0.056388244,
                                      0.008336335, 0.004492696, 0.018802641, 0.000950612,
                                      -0.002084390, 0.032400806, 0.002919893, 0.000783482,
                                      0.000418390, 0.001010272, 0.000822145, 0.001401844,
                                      -0.001036169, 0.000557435, 0.055809427, 0.000669531,
                                      0.000662854, 0.001170316, 0.002686288, 0.001107372,
                                      0.002639349, -0.000247541, 0.000836864, 0.002166075,
                                      0.001371552, 0.002001741, 0.000678955, -0.000238296,
                                      0.000962851, 0.004093352, 0.007408679, 0.053235047,
                                      0.004246668, 0.020447340, -0.000665203, 0.003728685,
                                      0.000312446, 0.001450683, -0.000716064, 0.000726174,
                                      -0.001767474, -0.001145588, 0.002696637, 0.010212964,
                                      0.000994947, 0.000731960, 0.002004791, 0.001078608,
                                      0.003214342, 0.000009328, -0.000490454, 0.005248325,
                                      0.003563314, 0.000307582, 0.004178572, -0.000313805,
                                      0.003213841, 0.002055545, 0.000125379, 0.002816900,
                                      -0.000229208, -0.000153753, 0.002720188, 0.024641726,
                                      0.003365490, 0.028351335, 0.004744909, -0.001307889,
                                      0.000593333, 0.000045976, -0.000615148, 0.011023235,
                                      0.000319741, 0.020895936, 0.015656520, -0.000278672,
                                      0.001331992, 0.000461192, 0.000648495, 0.001737582,
                                      0.003072129, 0.000442019, 0.001500826, 0.000277117,
                                      0.034157243, -0.000464848, 0.000605312, 0.002094435,
                                      0.000377452, 0.046378728, 0.006188455, -0.000892715,
                                      0.000570097, -0.001649146, 0.000715888, 0.018682770,
                                      0.005581054, 0.003493074, -0.000460337, 0.003616047,
                                      0.020126203, 0.000580944, 0.001157775, -0.000052956,
                                      0.001724476, 0.001698341, 0.004953851, 0.000589537,
                                      0.012777527, 0.001711186, 0.004246334, 0.014262568,
                                      0.005697390, 0.001910946, 0.002587435, 0.001484187,
                                      0.015941042, -0.000692395, 0.000216651, 0.000000215,
                                      0.004511143, 0.000084548, -0.000183424, -0.000062896,
                                      -0.000367433, 0.001949321, 0.000438243, 0.003033158,
                                      0.013752473, 0.000881071, 0.004353240, 0.007363294,
                                      0.002966964, 0.002980490, 0.001265038, 0.004368939,
                                      0.010231092, 0.003541090, 0.000389604, 0.001577491,
                                      0.000314377, 0.002390790, -0.001517796, 0.002015367,
                                      0.004526258, 0.000698475, 0.001935295, 0.000237718,
                                      0.000721072, 0.008630838, 0.001561390, 0.000549249,
                                      0.000515111, -0.000210833, 0.000971996, 0.003284793,
                                      -0.000588233, -0.000031413, 0.001479618, 0.002013581,
                                      0.046411913, 0.002585066, 0.009950211, 0.002119211,
                                      0.001313342, 0.002141143, 0.003531922, 0.001361258,
                                      0.004101855, 0.000171553, 0.000723327, 0.051701128,
                                      0.031787131, 0.004088445, 0.001714463, 0.000611181,
                                      0.002035168, 0.001177155, -0.000665039, -0.002594458,
                                      0.002504634, 0.000515007, 0.003303601, 0.002669161,
                                      0.001693213, 0.001549684, 0.000557729, -0.000119402,
                                      0.005894824, 0.000756789, 0.002059320, -0.001664673,
                                      0.000288526, -0.000623822, 0.000383941, 0.004046742,
                                      0.003823815, 0.012705334, 0.002247580, -0.000996775,
                                      0.002846325, 0.000787424, 0.013915200, 0.003357918,
                                      0.001007380, 0.001848120, 0.011404810, 0.001143667,
                                      0.003584519, 0.012226205, 0.005106798, -0.000911044,
                                      0.018628905, 0.003270032, 0.001351434, 0.021491811,
                                      -0.000939624, 0.002441409, 0.001823730, 0.002331196,
                                      0.002086279, 0.018569758, 0.001196255, 0.018768277,
                                      0.015497104, 0.003355356, 0.001363842, 0.001106566,
                                      -0.001645469, 0.001717647, 0.001883607, -0.001557577,
                                      0.005449146, 0.012310613, 0.008550454, 0.001646986,
                                      0.010077639, 0.000531720, 0.006448779, 0.010596751,
                                      0.001787551, 0.002657965, 0.006964669, 0.019462148,
                                      0.002061961, 0.001123365, 0.001840214, 0.000800223,
                                      0.002905334, 0.000933441, 0.002684195, -0.000596906,
                                      0.005972263, 0.001133045, 0.001992687, 0.002964385,
                                      0.000894554, 0.041192640, 0.002780117, 0.020105816,
                                      0.000564217, 0.001341695, -0.000167203, 0.002376430,
                                      0.001507063, 0.001972337, 0.001663474, 0.010295492,
                                      0.003544198, 0.002897280, 0.003244665, 0.002423231,
                                      0.003251085, 0.001794899, 0.003673715, 0.001683927,
                                      -0.000988871, 0.005137411, 0.001813619, 0.000805660 };
   std::valarray<double> out_data = { 0.005589952, 0.008850746, 0.054236621, 0.000629550,
                                      -0.000566020, 0.005704774, 0.000876636, 0.062880416,
                                      0.076005074, -0.000944851, -0.001643039, 0.000261845,
                                      0.185191953, -0.001983517, -0.000556834, 0.000088128,
                                      -0.000970656, 0.013320940, 0.000637785, 0.017624268,
                                      0.047265616, -0.001028191, 0.002306022, 0.001407544,
                                      -0.000265690, -0.000467965, -0.002122762, -0.001450738,
                                      0.020822825, 0.000667279, 0.010509894, 0.007746443,
                                      -0.001751348, 0.023070599, -0.001983215, 0.011085899,
                                      0.000601377, 0.007774137, 0.000483010, 0.001739343,
                                      0.001641787, 0.002255718, -0.000081366, 0.001974831,
                                      0.004402311, 0.006562846, 0.002486800, 0.001160200,
                                      0.015430717, 0.002568742, -0.001776769, -0.000938559,
                                      0.003521052, -0.000670277, 0.002776448, 0.016308515,
                                      0.003473947, 0.004771234, 0.000081182, 0.007456531,
                                      0.004991044, 0.002808878, 0.002152085, 0.002984244,
                                      -0.000176890, 0.001851649, 0.004996344, 0.002716805,
                                      0.005810988, 0.001882486, 0.007225077, 0.011789676,
                                      0.005048108, 0.003751704, 0.009729727, 0.010051200,
                                      0.008737041, 0.004563147, 0.009435672, 0.070459095,
                                      0.006875241, 0.008557646, 0.023822521, 0.010828440,
                                      0.007178489, 0.457443001, -0.013513834, -0.009470875,
                                      -0.011892069, 0.018248949, -0.007864233, 0.012906225,
                                      -0.008015611, -0.004094256, -0.003045048, 0.014132828,
                                      0.013137592, -0.003403832, 0.095111665, 0.013219096,
                                      -0.007388255, 0.004202850, -0.004865220, -0.004837479,
                                      -0.000491938, -0.002661433, 0.014387703, 0.002799814,
                                      -0.003268169, -0.000745032, -0.001651950, 0.001948151,
                                      -0.001425619, 0.005648827, 0.001238235, 0.005990755,
                                      0.004357404, 0.006294613, 0.002236739, 0.145020722,
                                      0.017193817, 0.000664785, 0.031519088, -0.005330263,
                                      -0.006062249, 0.059294080, -0.003854882, -0.004362312,
                                      -0.002878558, -0.000780028, -0.000480742, 0.000807214,
                                      -0.001984548, 0.000872713, 0.137200772, 0.001979997,
                                      -0.003460307, -0.001666038, 0.001378288, -0.000562890,
                                      0.003106209, -0.001579040, 0.000769357, 0.004747103,
                                      0.002480805, 0.004605645, 0.001176724, 0.000422777,
                                      0.004179623, 0.015105493, 0.020622435, 0.143418417,
                                      0.012969844, 0.039145042, -0.005809995, 0.002359712,
                                      -0.003194970, 0.000556394, -0.002565698, 0.001573401,
                                      -0.001586131, 0.000007271, 0.010618465, 0.024148208,
                                      0.003554287, 0.003230180, 0.005683908, 0.004227829,
                                      0.009369623, 0.003517789, 0.004443622, 0.017936316,
                                      0.012658120, 0.006455545, 0.018076287, 0.008606461,
                                      0.015500238, 0.013757799, 0.010520742, 0.019054715,
                                      0.013082426, 0.014537625, 0.022032498, 0.092032638,
                                      0.027955519, 0.089237955, 0.026306037, 0.013659358,
                                      0.016002589, 0.015507646, 0.015774877, 0.044213996,
                                      0.017809804, 0.068281669, 0.044886692, 0.010800316,
                                      0.013800903, 0.013138125, 0.014799990, 0.017741178,
                                      0.020320753, 0.016298747, 0.019558183, 0.018860297,
                                      0.128491972, 0.030159069, 0.029104400, 0.030364768,
                                      0.026580118, 0.154138771, 0.042047597, 0.022307741,
                                      0.024539839, 0.021266997, 0.026851644, 0.067398232,
                                      0.030424368, 0.023931873, 0.016141648, 0.027425982,
                                      0.073718186, 0.022847159, 0.024082455, 0.021108958,
                                      0.028270654, 0.027739396, 0.036557144, 0.026424325,
                                      0.056301889, 0.029555949, 0.033425078, 0.064064156,
                                      0.036351323, 0.027427712, 0.029473501, 0.028235622,
                                      0.076406608, 0.031951787, 0.032518141, 0.032589375,
                                      0.044765415, 0.034328207, 0.034977306, 0.037306178,
                                      0.038956448, 0.046532903, 0.043232276, 0.052525889,
                                      0.085596164, 0.049578496, 0.057429146, 0.066708604,
                                      0.054254434, 0.056614822, 0.051613509, 0.062226268,
                                      0.081505213, 0.061673124, 0.055686096, 0.060670881,
                                      0.057613548, 0.065914452, 0.058410271, 0.069119115,
                                      0.073991165, 0.066832043, 0.072048442, 0.067923791,
                                      0.071592098, 0.097830854, 0.079709518, 0.076171925,
                                      0.077892908, 0.077842067, 0.083299658, 0.093188255,
                                      0.081785146, 0.085204396, 0.091494751, 0.095179291,
                                      0.262084945, 0.110607519, 0.119438067, 0.098805556,
                                      0.096123707, 0.098368672, 0.103767351, 0.097692717,
                                      0.109392411, 0.097446064, 0.099699854, 0.282290352,
                                      0.183567726, 0.108634677, 0.099726615, 0.096201135,
                                      0.098132596, 0.097227546, 0.094954824, 0.095032934,
                                      0.106717253, 0.101602143, 0.111809803, 0.110372922,
                                      0.108785995, 0.110043720, 0.108777473, 0.109167570,
                                      0.133433410, 0.115456543, 0.119775373, 0.114265558,
                                      0.119342540, 0.119994518, 0.124087277, 0.137725588,
                                      0.137682712, 0.172901678, 0.134779958, 0.129396354,
                                      0.139241236, 0.134815052, 0.182664524, 0.145425668,
                                      0.139384789, 0.143798416, 0.177114111, 0.144686448,
                                      0.155979726, 0.182017296, 0.157919021, 0.146699997,
                                      0.212469952, 0.158515371, 0.154594352, 0.221130317,
                                      0.153296974, 0.158395753, 0.156893482, 0.158280535,
                                      0.160219213, 0.222189950, 0.161743894, 0.218839463,
                                      0.202261021, 0.168993325, 0.163767419, 0.163502362,
                                      0.159683080, 0.170635313, 0.171816657, 0.165034293,
                                      0.184655381, 0.211248074, 0.193064944, 0.176126365,
                                      0.205129361, 0.176634755, 0.190870814, 0.213255444,
                                      0.181902847, 0.183566363, 0.201776027, 0.255281145,
                                      0.189526607, 0.186512493, 0.190503060, 0.189159194,
                                      0.197833853, 0.192951547, 0.200662601, 0.193141476,
                                      0.219984207, 0.200136622, 0.206064560, 0.211643268,
                                      0.205997444, 0.375595177, 0.226430024, 0.275629888,
                                      0.221623478, 0.220135585, 0.214698154, 0.225712709,
                                      0.224170461, 0.225993550, 0.226396656, 0.249861575,
                                      0.229466037, 0.229543807, 0.232410386, 0.231383577,
                                      0.235921562, 0.232888918, 0.241645944, 0.236150829,
                                      0.232984265, 0.254905334, 0.242607373, 0.242162157 };

   im.setup( 1, in_data.size() );
   //debug_level = 11;
   im.clock_charge( in_data );

   //for (unsigned int i=0;i<in_data.size();++i)
   // std::cout << std::fixed << std::setprecision(9) << in_data[i] << ", ";
   // std::cout << std::endl;

   //BOOST_CHECK_EQUAL( check_array( in_data, out_data, 1e-5), true );
}


BOOST_AUTO_TEST_SUITE_END()
