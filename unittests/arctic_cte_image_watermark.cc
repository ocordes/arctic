//#define BOOST_TEST_MODULE strstr

#include <boost/test/unit_test.hpp>

#include <iostream>
#include <iomanip>

#include "cte_image_watermark.hh"
#include "params.hh"
#include "params_acs.hh"
#include "output.hh"

// written by: Oliver Cordes 2017-06-01
// changed by: Oliver Cordes 2020-03-06


bool check_array( std::valarray<double> & a, std::valarray<double> & b, double limits )
{
  for (unsigned int i=0; i<a.size();++i)
  {
    if ( fabs( a[i] - b[i] ) > limits )
    {
      std::cout << std::fixed << std::setprecision(9)
                << "Error in array [" << i << "]: a=" << a[i] <<  " b=" << b[i]
                << " diff=" << fabs( a[i] - b[i] ) << " limits=" << limits << std::endl;
      return false;
    }
  }

  return true;
}


BOOST_AUTO_TEST_SUITE( cte_mage_watermark_test_suite )

BOOST_AUTO_TEST_CASE( constructor )
{
  cte_image_watermark im;

  //BOOST_CHECK_EQUAL( im.prgname, "Program_name_test" );
}

// check the following parameters
//  - unclocking
//  - no rotation
//  - express = 1
//  - n_iteration = 1
//  - cut_upper_limits = false
//  - high signal to noise
//  - dark_mode = false
//  - charge_injection = false
BOOST_AUTO_TEST_CASE( correction1 )
{
   std::shared_ptr<params_acs> p = std::shared_ptr<params_acs>( new params_acs() );

   double jd = +2452334.5 + 3506.238668981474;

   p->calc_trap_config( jd );

   cte_image_watermark im( (std::shared_ptr<params> &) p );

   std::valarray<double> in_data =  { 40.787811279, 42.996334076, 36.101192474,
                                      34.036590576, 28.182380676, 33.998012543,
                                      16.299722672, 32.821144104, 30.215837479,
                                      30.543056488 };
   std::valarray<double> out_data = { 40.837473022, 43.048471768, 36.146614489,
                                      34.080822266, 28.220484291, 34.049768026,
                                      16.316589522, 32.891894026, 30.255838231,
                                      30.585432681 };

   im.setup( 1, in_data.size() );
   im.clock_charge( in_data );

   //for (unsigned int i=0;i<in_data.size();++i)
   //     std::cout << std::fixed << std::setprecision(9) << in_data[i] << ", ";
   //std::cout << std::endl;

   BOOST_CHECK_EQUAL( check_array( in_data, out_data, 1e-5), true );
}


// check the following parameters
//  - unclocking
//  - no rotation
//  - direction forward
//  - express = 1
//  - n_iteration = 1
//  - cut_upper_limits = false
//  - low signal to noise
//  - dark_mode = false
//  - charge_injection = false
BOOST_AUTO_TEST_CASE( correction2 )
{
   std::shared_ptr<params_acs> p = std::shared_ptr<params_acs>( new params_acs() );

   //double jd = +2452334.5 + 3506.238668981474;
   double jd = +2452334.5 + 2786.02;

   p->calc_trap_config( jd );

   cte_image_watermark im( (std::shared_ptr<params> &) p );

   std::valarray<double> in_data =  { 0.008679612, 0.002772796, 0.001571912, 0.001605783,
                                      0.000871051, 0.001173347, 0.001275275, 0.000993010,
                                      -0.000350387, 0.003193463, 0.018024899, 0.014778999,
                                      0.002280427, 0.001436972, 0.000917238, 0.006845565,
                                      0.004871908, 0.291465133, 0.003689340, 0.020187818,
                                      0.002238023, 0.003081655, 0.000947794, 0.000270663,
                                      -0.000422476, 0.002363467, 0.001035341, 0.028084122,
                                      0.006980744, 0.003283431, 0.007109892, 0.003935513,
                                      0.000978794, -0.000460752, -0.001094718, 0.001689621,
                                      0.002342759, 0.007524569, 0.000076040, 0.001714738,
                                      0.000504006, 0.007206579, 0.000830590, 0.012597033,
                                      0.002316516, 0.012605761, 0.015178495, 0.003467531,
                                      0.000858165, 0.002558219, 0.002378170, 0.002249520,
                                      0.001153489, -0.000369282, 0.002616879, 0.001682350,
                                      0.002737300, 0.004039197, 0.015030440, 0.000175450,
                                      0.001274341, 0.008631511, 0.004427247, 0.002912365,
                                      0.001941754, 0.002695119, 0.001299986, 0.000986228,
                                      0.000801815, 0.000617397, 0.002942618, 0.026314680,
                                      0.008317295, 0.000036347, 0.014502814, 0.001302069,
                                      0.002505186, 0.067330942, 0.003535634, 0.000450654 };

   std::valarray<double> out_data = { 0.009424694, 0.003164889, 0.001865360, 0.001944310,
                                      0.001087437, 0.001532330, 0.001655542, 0.001273407,
                                      -0.000367015, 0.005296758, 0.024725593, 0.015687481,
                                      0.001731822, 0.001183639, 0.000758222, 0.009297302,
                                      0.005239197, 0.345897190, -0.004963907, 0.018585195,
                                      -0.001635478, 0.000640321, -0.001423332, -0.001810380,
                                      -0.002234126, 0.001979415, -0.000273190, 0.040624039,
                                      0.004742687, 0.001290465, 0.007045717, 0.002771741,
                                      -0.000628943, -0.001937729, -0.002224807, 0.001810590,
                                      0.002604743, 0.011457916, -0.001598655, 0.001408532,
                                      -0.000270167, 0.010977892, -0.000350368, 0.020755314,
                                      0.000819247, 0.016868398, 0.019796339, 0.001656960,
                                      -0.000873127, 0.002276620, 0.002029171, 0.002022631,
                                      0.000650824, -0.001117062, 0.003859376, 0.001699797,
                                      0.003973821, 0.006440337, 0.028123836, -0.002426407,
                                      0.000252848, 0.012618639, 0.004176493, 0.002485431,
                                      0.001507397, 0.002979486, 0.001009650, 0.000825569,
                                      0.000767468, 0.000667599, 0.005397469, 0.058433289,
                                      0.010185970, -0.003083751, 0.020770972, -0.001462083,
                                      0.001405211, 0.129477061, -0.005787341, -0.005975364 };

   im.setup( 1, in_data.size() );
   //debug_level = 10;
   im.clock_charge( in_data );

   //for (unsigned int i=0;i<in_data.size();++i)
   //     std::cout << std::fixed << std::setprecision(9) << in_data[i] << ", ";
   //std::cout << std::endl;

   BOOST_CHECK_EQUAL( check_array( in_data, out_data, 1e-9), true );
}

// check the following parameters
//  - unclocking
//  - no rotation
//  - direction forward
//  - express = 2
//  - n_iteration = 1
//  - cut_upper_limits = false
//  - high signal to noise
//  - dark_mode = false
//  - charge_injection = false
BOOST_AUTO_TEST_CASE( correction3 )
{
   std::shared_ptr<params_acs> p = std::shared_ptr<params_acs>( new params_acs() );

   double jd = +2452334.5 + 3506.238668981474;

   p->calc_trap_config( jd );
   p->express = 2;

   cte_image_watermark im( (std::shared_ptr<params> &) p );

   std::valarray<double> in_data =  { 40.787811279, 42.996334076, 36.101192474,
                                      34.036590576, 28.182380676, 33.998012543,
                                      16.299722672, 32.821144104, 30.215837479,
                                      30.543056488 };
   std::valarray<double> out_data = { 40.837473022, 43.048471768, 36.146614489,
                                      34.080822266, 28.220484291, 34.049731349,
                                      16.316555457, 32.891862039, 30.255801865,
                                      30.585389830 };

   im.setup( 1, in_data.size() );
   im.clock_charge( in_data );

   //for (unsigned int i=0;i<in_data.size();++i)
   // std::cout << std::fixed << std::setprecision(9) << in_data[i] << ", ";
   //  std::cout << std::endl;

   BOOST_CHECK_EQUAL( check_array( in_data, out_data, 1e-5), true );
}


// check the following parameters
//  - unclocking
//  - no rotation
//  - direction forward
//  - express = 1
//  - n_iteration = 2
//  - cut_upper_limits = false
//  - high signal to noise
//  - dark_mode = false
//  - charge_injection = false
BOOST_AUTO_TEST_CASE( correction4 )
{
   std::shared_ptr<params_acs> p = std::shared_ptr<params_acs>( new params_acs() );

   double jd = +2452334.5 + 3506.238668981474;

   p->calc_trap_config( jd );
   p->n_iterations = 2;

   cte_image_watermark im( (std::shared_ptr<params> &) p );

   std::valarray<double> in_data =  { 40.787811279, 42.996334076, 36.101192474,
                                      34.036590576, 28.182380676, 33.998012543,
                                      16.299722672, 32.821144104, 30.215837479,
                                      30.543056488 };
   std::valarray<double> out_data = { 40.837501130, 43.048501035, 36.146641456,
                                      34.080849694, 28.220509467, 34.049812494,
                                      16.316587105, 32.892009596, 30.255842153,
                                      30.585456290 };

   im.setup( 1, in_data.size() );
   im.clock_charge( in_data );

  //  for (unsigned int i=0;i<in_data.size();++i)
  //    std::cout << std::fixed << std::setprecision(9) << in_data[i] << ", ";
  //  std::cout << std::endl;

   BOOST_CHECK_EQUAL( check_array( in_data, out_data, 1e-5), true );
}

// check the following parameters
//  - unclocking
//  - no rotation
//  - direction forward
//  - express = 1
//  - n_iteration = 1
//  - cut_upper_limits = true limits=40.0
//  - high signal to noise
//  - dark_mode = false
//  - charge_injection = false
BOOST_AUTO_TEST_CASE( correction5 )
{
   std::shared_ptr<params_acs> p = std::shared_ptr<params_acs>( new params_acs() );

   double jd = +2452334.5 + 3506.238668981474;

   p->calc_trap_config( jd );
   p->cut_upper_limit = true;
   p->upper_limit = 40.0;

   cte_image_watermark im( (std::shared_ptr<params> &) p );

   std::valarray<double> in_data =  { 40.787811279, 42.996334076, 36.101192474,
                                      34.036590576, 28.182380676, 33.998012543,
                                      16.299722672, 32.821144104, 30.215837479,
                                      30.543056488 };
   std::valarray<double> out_data = { 40.000000000, 40.000000000, 36.146614489,
                                      34.080822266, 28.220484291, 34.049768026,
                                      16.316589522, 32.891894026, 30.255838231,
                                      30.585432681 };

   im.setup( 1, in_data.size() );
   im.clock_charge( in_data );

   //for (unsigned int i=0;i<in_data.size();++i)
   //   std::cout << std::fixed << std::setprecision(9) << in_data[i] << ", ";
   //std::cout << std::endl;

   BOOST_CHECK_EQUAL( check_array( in_data, out_data, 1e-5), true );
}

// check the following parameters
//  - unclocking
//  - rotation,
//  - direction forward
//  - express = 1
//  - n_iteration = 1
//  - cut_upper_limits = false
//  - high signal to noise
//  - dark_mode = false
//  - charge_injection = false
BOOST_AUTO_TEST_CASE( correction6 )
{
   std::shared_ptr<params_acs> p = std::shared_ptr<params_acs>( new params_acs() );

   double jd = +2452334.5 + 3506.238668981474;

   p->calc_trap_config( jd );
   p->rotate = true;

   cte_image_watermark im( (std::shared_ptr<params> &) p );

   std::valarray<double> in_data =  { 40.787811279, 42.996334076, 36.101192474,
                                      34.036590576, 28.182380676, 33.998012543,
                                      16.299722672, 32.821144104, 30.215837479,
                                      30.543056488 };
   std::valarray<double> out_data = { 40.837473022, 43.048471768, 36.146614489,
                                      34.080822266, 28.220484291, 34.049768026,
                                      16.316589522, 32.891894026, 30.255838231,
                                      30.585432681 };

   im.setup( in_data.size(), 1 );
   im.clock_charge( in_data );

   //for (unsigned int i=0;i<in_data.size();++i)
   //   std::cout << std::fixed << std::setprecision(9) << in_data[i] << ", ";
   //std::cout << std::endl;

   BOOST_CHECK_EQUAL( check_array( in_data, out_data, 1e-5), true );
}

// check the following parameters
//  - unclocking
//  - no rotation
//  - direction forward
//  - express = 1
//  - n_iteration = 1
//  - cut_upper_limits = false
//  - low signal to noise
//  - dark_mode = true
//  - charge_injection = false
BOOST_AUTO_TEST_CASE( correction7 )
{
   std::shared_ptr<params_acs> p = std::shared_ptr<params_acs>( new params_acs() );

   //double jd = +2452334.5 + 3506.238668981474;
   double jd = +2452334.5 + 2786.02;

   p->calc_trap_config( jd );
   p->dark_mode = true;

   cte_image_watermark im( (std::shared_ptr<params> &) p );

   std::valarray<double> in_data =  { 0.008679612, 0.002772796, 0.001571912, 0.001605783,
                                      0.000871051, 0.001173347, 0.001275275, 0.000993010,
                                      -0.000350387, 0.003193463, 0.018024899, 0.014778999,
                                      0.002280427, 0.001436972, 0.000917238, 0.006845565,
                                      0.004871908, 0.291465133, 0.003689340, 0.020187818,
                                      0.002238023, 0.003081655, 0.000947794, 0.000270663,
                                      -0.000422476, 0.002363467, 0.001035341, 0.028084122,
                                      0.006980744, 0.003283431, 0.007109892, 0.003935513,
                                      0.000978794, -0.000460752, -0.001094718, 0.001689621,
                                      0.002342759, 0.007524569, 0.000076040, 0.001714738,
                                      0.000504006, 0.007206579, 0.000830590, 0.012597033,
                                      0.002316516, 0.012605761, 0.015178495, 0.003467531,
                                      0.000858165, 0.002558219, 0.002378170, 0.002249520,
                                      0.001153489, -0.000369282, 0.002616879, 0.001682350,
                                      0.002737300, 0.004039197, 0.015030440, 0.000175450,
                                      0.001274341, 0.008631511, 0.004427247, 0.002912365,
                                      0.001941754, 0.002695119, 0.001299986, 0.000986228,
                                      0.000801815, 0.000617397, 0.002942618, 0.026314680,
                                      0.008317295, 0.000036347, 0.014502814, 0.001302069,
                                      0.002505186, 0.067330942, 0.003535634, 0.000450654 };

   std::valarray<double> out_data = { 0.009424694, 0.003164889, 0.001865360, 0.001944310,
                                      0.001087437, 0.001532330, 0.001655542, 0.001273407,
                                      -0.000367015, 0.005296758, 0.024725593, 0.015687481,
                                      0.001731822, 0.001183639, 0.000758222, 0.009297302,
                                      0.005239197, 0.345897190, -0.004963907, 0.018585195,
                                      -0.001635478, 0.000640321, -0.001423332, -0.001810380,
                                      -0.002234126, 0.001979415, -0.000273190, 0.040624039,
                                      0.004742687, 0.001290465, 0.007045717, 0.002771741,
                                      -0.000628943, -0.001937729, -0.002224807, 0.001810590,
                                      0.002604743, 0.011457916, -0.001598655, 0.001408532,
                                      -0.000270167, 0.010977892, -0.000350368, 0.020755314,
                                      0.000819247, 0.016868398, 0.019796339, 0.001656960,
                                      -0.000873127, 0.002276620, 0.002029171, 0.002022631,
                                      0.000650824, -0.001117062, 0.003859376, 0.001699797,
                                      0.003973821, 0.006440337, 0.028123836, -0.002426407,
                                      0.000252848, 0.012618639, 0.004176493, 0.002485431,
                                      0.001507397, 0.002979486, 0.001009650, 0.000825569,
                                      0.000767468, 0.000667599, 0.005397469, 0.058433289,
                                      0.010185970, -0.003083751, 0.020770972, -0.001462083,
                                      0.001405211, 0.129477061, -0.005787341, -0.005975364 };

   im.setup( 1, in_data.size() );

   im.clock_charge( in_data );

   //for (unsigned int i=0;i<in_data.size();++i)
   // std::cout << std::fixed << std::setprecision(9) << in_data[i] << ", ";
   //std::cout << std::endl;

   BOOST_CHECK_EQUAL( check_array( in_data, out_data, 1e-9), true );
}

// check the following parameters
//  - clocking !!
//  - no rotation
//  - direction forward
//  - express = 1
//  - n_iteration = 1
//  - cut_upper_limits = false
//  - high signal to noise
//  - dark_mode = false
//  - charge_injection = false
BOOST_AUTO_TEST_CASE( correction8 )
{
   std::shared_ptr<params_acs> p = std::shared_ptr<params_acs>( new params_acs() );

   double jd = +2452334.5 + 3506.238668981474;

   p->calc_trap_config( jd );
   p->unclock = false;

   cte_image_watermark im( (std::shared_ptr<params> &) p );

   std::valarray<double> in_data =  { 40.787811279, 42.996334076, 36.101192474,
                                      34.036590576, 28.182380676, 33.998012543,
                                      16.299722672, 32.821144104, 30.215837479,
                                      30.543056488 };
   std::valarray<double> out_data = { 40.738149536, 42.944196384, 36.055770459,
                                      33.992358886, 28.144277061, 33.946257060,
                                      16.282855822, 32.750394182, 30.175836727,
                                      30.500680295 };

   im.setup( 1, in_data.size() );
   im.clock_charge( in_data );

   //for (unsigned int i=0;i<in_data.size();++i)
   //     std::cout << std::fixed << std::setprecision(9) << in_data[i] << ", ";
   //std::cout << std::endl;

   BOOST_CHECK_EQUAL( check_array( in_data, out_data, 1e-5), true );
}

// check the following parameters
//  - unclocking
//  - no rotation
//  - direction forward
//  - express = 1
//  - n_iteration = 1
//  - cut_upper_limits = false
//  - high signal to noise
//  - dark_mode = false
//  - charge_injection = true
BOOST_AUTO_TEST_CASE( correction9 )
{
   std::shared_ptr<params_acs> p = std::shared_ptr<params_acs>( new params_acs() );

   double jd = +2452334.5 + 3506.238668981474;

   p->calc_trap_config( jd );
   p->charge_injection = true;

   cte_image_watermark im( (std::shared_ptr<params> &) p );

   std::valarray<double> in_data =  { 40.787811279, 42.996334076, 36.101192474,
                                      34.036590576, 28.182380676, 33.998012543,
                                      16.299722672, 32.821144104, 30.215837479,
                                      30.543056488 };
   std::valarray<double> out_data = { 41.284428712, 43.009182203, 36.093636050,
                                      34.030583084, 28.171539424, 34.002535416,
                                      16.272294569, 32.842116107, 30.210347981,
                                      30.540123590 };

   im.setup( 1, in_data.size() );
   im.clock_charge( in_data );

  //  for (unsigned int i=0;i<in_data.size();++i)
  //    std::cout << std::fixed << std::setprecision(9) << in_data[i] << ", ";
  //    std::cout << std::endl;

   BOOST_CHECK_EQUAL( check_array( in_data, out_data, 1e-5), true );
}


// check the following parameters
//  - unclocking
//  - no rotation
//  - direction forward
//  - express = 1
//  - n_iteration = 1
//  - cut_upper_limits = false
//  - high signal to noise, bright event
//  - dark_mode = false
//  - charge_injection = true
BOOST_AUTO_TEST_CASE( correction10 )
{
   std::shared_ptr<params_acs> p = std::shared_ptr<params_acs>( new params_acs() );

   double jd = +2452334.5 + 3506.238668981474;

   p->calc_trap_config( jd );

   cte_image_watermark im( (std::shared_ptr<params> &) p );

   std::valarray<double> in_data =  { 40.787811279, 120000.0, 120000.0,
                                      34.036590576, 28.182380676, 33.998012543,
                                      16.299722672, 32.821144104, 30.215837479,
                                      30.543056488 };
   std::valarray<double> out_data = { 40.837473022, 120003.414683020, 120001.732172381,
                                      33.119291455, 27.763408877, 33.745011667,
                                      16.070982858, 32.678211430, 30.065748596,
                                      30.414666171 };


   im.setup( 1, in_data.size() );
   //debug_level = 11;
   im.clock_charge( in_data );

  //  for (unsigned int i=0;i<in_data.size();++i)
  //    std::cout << std::fixed << std::setprecision(9) << in_data[i] << ", ";
  //  std::cout << std::endl;

   BOOST_CHECK_EQUAL( check_array( in_data, out_data, 1e-5), true );
}

// check the following parameters
//  - unclocking
//  - no rotation
//  - direction forward
//  - express = 1
//  - n_iteration = 1
//  - cut_upper_limits = false
//  - low signal to noise, special code variants
//  - dark_mode = false
//  - charge_injection = true
BOOST_AUTO_TEST_CASE( correction11 )
{
   std::shared_ptr<params_acs> p = std::shared_ptr<params_acs>( new params_acs() );

   double jd = +2452334.5 + 3506.238668981474;

   p->calc_trap_config( jd );

   cte_image_watermark im( (std::shared_ptr<params> &) p );

   std::valarray<double> in_data =  { 0.004847145, 0.007732007, 0.049510635, 0.001067913,
                                      -0.000247162, 0.004337602, 0.000981794, 0.051919892,
                                      0.070345663, 0.001538368, -0.000202273, 0.000871166,
                                      0.155586869, 0.003494894, 0.002256593, 0.001744395,
                                      0.000661402, 0.009931946, 0.002196539, 0.013683222,
                                      0.036975451, 0.002516039, 0.003738527, 0.002773253,
                                      0.001002239, 0.000693295, -0.000938984, -0.000618278,
                                      0.011617737, 0.001937658, 0.008678678, 0.007352134,
                                      0.000139693, 0.014240431, 0.000268426, 0.008837313,
                                      0.001986295, 0.006124885, 0.001527711, 0.001858454,
                                      0.001613897, 0.001934602, 0.000378626, 0.001147790,
                                      0.002633431, 0.003398345, 0.002276022, 0.001221071,
                                      0.006977582, 0.001772739, -0.000915429, -0.000717383,
                                      0.001644378, -0.000545463, 0.001065807, 0.006671304,
                                      0.001860488, 0.003095792, 0.000336742, 0.003551366,
                                      0.002869807, 0.002044313, 0.001553043, 0.001573025,
                                      -0.000123282, 0.000719514, 0.001478606, 0.000789685,
                                      0.001495496, -0.000376881, 0.001774460, 0.003151278,
                                      0.000628104, -0.000022347, 0.002160625, 0.002235872,
                                      0.001804197, -0.000969985, 0.001718188, 0.020882064,
                                      -0.000664237, 0.000779585, 0.006775280, 0.002218873,
                                      0.000667147, 0.210815251, 0.000818127, 0.004492437,
                                      -0.000267817, 0.016790701, 0.001635913, 0.013963045,
                                      0.000259228, 0.001222858, 0.001099764, 0.010309614,
                                      0.012230949, 0.001975680, 0.048239432, 0.018518399,
                                      0.001666809, 0.007671276, 0.001142575, -0.000021272,
                                      0.002129643, 0.000372453, 0.008304017, 0.004156272,
                                      0.000114049, 0.000971994, 0.000004171, 0.001553022,
                                      -0.000251963, 0.002336544, 0.000963997, 0.002047168,
                                      0.001900077, 0.002658057, 0.000768963, 0.056388244,
                                      0.008336335, 0.004492696, 0.018802641, 0.000950612,
                                      -0.002084390, 0.032400806, 0.002919893, 0.000783482,
                                      0.000418390, 0.001010272, 0.000822145, 0.001401844,
                                      -0.001036169, 0.000557435, 0.055809427, 0.000669531,
                                      0.000662854, 0.001170316, 0.002686288, 0.001107372,
                                      0.002639349, -0.000247541, 0.000836864, 0.002166075,
                                      0.001371552, 0.002001741, 0.000678955, -0.000238296,
                                      0.000962851, 0.004093352, 0.007408679, 0.053235047,
                                      0.004246668, 0.020447340, -0.000665203, 0.003728685,
                                      0.000312446, 0.001450683, -0.000716064, 0.000726174,
                                      -0.001767474, -0.001145588, 0.002696637, 0.010212964,
                                      0.000994947, 0.000731960, 0.002004791, 0.001078608,
                                      0.003214342, 0.000009328, -0.000490454, 0.005248325,
                                      0.003563314, 0.000307582, 0.004178572, -0.000313805,
                                      0.003213841, 0.002055545, 0.000125379, 0.002816900,
                                      -0.000229208, -0.000153753, 0.002720188, 0.024641726,
                                      0.003365490, 0.028351335, 0.004744909, -0.001307889,
                                      0.000593333, 0.000045976, -0.000615148, 0.011023235,
                                      0.000319741, 0.020895936, 0.015656520, -0.000278672,
                                      0.001331992, 0.000461192, 0.000648495, 0.001737582,
                                      0.003072129, 0.000442019, 0.001500826, 0.000277117,
                                      0.034157243, -0.000464848, 0.000605312, 0.002094435,
                                      0.000377452, 0.046378728, 0.006188455, -0.000892715,
                                      0.000570097, -0.001649146, 0.000715888, 0.018682770,
                                      0.005581054, 0.003493074, -0.000460337, 0.003616047,
                                      0.020126203, 0.000580944, 0.001157775, -0.000052956,
                                      0.001724476, 0.001698341, 0.004953851, 0.000589537,
                                      0.012777527, 0.001711186, 0.004246334, 0.014262568,
                                      0.005697390, 0.001910946, 0.002587435, 0.001484187,
                                      0.015941042, -0.000692395, 0.000216651, 0.000000215,
                                      0.004511143, 0.000084548, -0.000183424, -0.000062896,
                                      -0.000367433, 0.001949321, 0.000438243, 0.003033158,
                                      0.013752473, 0.000881071, 0.004353240, 0.007363294,
                                      0.002966964, 0.002980490, 0.001265038, 0.004368939,
                                      0.010231092, 0.003541090, 0.000389604, 0.001577491,
                                      0.000314377, 0.002390790, -0.001517796, 0.002015367,
                                      0.004526258, 0.000698475, 0.001935295, 0.000237718,
                                      0.000721072, 0.008630838, 0.001561390, 0.000549249,
                                      0.000515111, -0.000210833, 0.000971996, 0.003284793,
                                      -0.000588233, -0.000031413, 0.001479618, 0.002013581,
                                      0.046411913, 0.002585066, 0.009950211, 0.002119211,
                                      0.001313342, 0.002141143, 0.003531922, 0.001361258,
                                      0.004101855, 0.000171553, 0.000723327, 0.051701128,
                                      0.031787131, 0.004088445, 0.001714463, 0.000611181,
                                      0.002035168, 0.001177155, -0.000665039, -0.002594458,
                                      0.002504634, 0.000515007, 0.003303601, 0.002669161,
                                      0.001693213, 0.001549684, 0.000557729, -0.000119402,
                                      0.005894824, 0.000756789, 0.002059320, -0.001664673,
                                      0.000288526, -0.000623822, 0.000383941, 0.004046742,
                                      0.003823815, 0.012705334, 0.002247580, -0.000996775,
                                      0.002846325, 0.000787424, 0.013915200, 0.003357918,
                                      0.001007380, 0.001848120, 0.011404810, 0.001143667,
                                      0.003584519, 0.012226205, 0.005106798, -0.000911044,
                                      0.018628905, 0.003270032, 0.001351434, 0.021491811,
                                      -0.000939624, 0.002441409, 0.001823730, 0.002331196,
                                      0.002086279, 0.018569758, 0.001196255, 0.018768277,
                                      0.015497104, 0.003355356, 0.001363842, 0.001106566,
                                      -0.001645469, 0.001717647, 0.001883607, -0.001557577,
                                      0.005449146, 0.012310613, 0.008550454, 0.001646986,
                                      0.010077639, 0.000531720, 0.006448779, 0.010596751,
                                      0.001787551, 0.002657965, 0.006964669, 0.019462148,
                                      0.002061961, 0.001123365, 0.001840214, 0.000800223,
                                      0.002905334, 0.000933441, 0.002684195, -0.000596906,
                                      0.005972263, 0.001133045, 0.001992687, 0.002964385,
                                      0.000894554, 0.041192640, 0.002780117, 0.020105816,
                                      0.000564217, 0.001341695, -0.000167203, 0.002376430,
                                      0.001507063, 0.001972337, 0.001663474, 0.010295492,
                                      0.003544198, 0.002897280, 0.003244665, 0.002423231,
                                      0.003251085, 0.001794899, 0.003673715, 0.001683927,
                                      -0.000988871, 0.005137411, 0.001813619, 0.000805660 };
   std::valarray<double> out_data = { 0.005589952, 0.008850746, 0.054236621, 0.000642093,
                                      -0.000518221, 0.005825575, 0.000976124, 0.062604091,
                                      0.076000890, -0.000742778, -0.001509091, 0.000396976,
                                      0.184728589, -0.001745645, -0.000379458, 0.000059421,
                                      -0.000802379, 0.012870845, 0.000821657, 0.017377066,
                                      0.047372863, -0.000795731, 0.002332552, 0.001698831,
                                      -0.000223237, -0.000257477, -0.001885415, -0.001312502,
                                      0.020259370, 0.000641511, 0.010882097, 0.007882879,
                                      -0.001438872, 0.022291459, -0.001917842, 0.011588227,
                                      0.000927474, 0.007679251, 0.000753911, 0.001724502,
                                      0.001630659, 0.002348018, 0.000157220, 0.001677184,
                                      0.004714314, 0.005740710, 0.002870190, 0.001534132,
                                      0.014328517, 0.001897062, -0.001324701, -0.000695403,
                                      0.003234053, -0.000355362, 0.002369930, 0.015437962,
                                      0.003540084, 0.004884641, 0.000409384, 0.006343112,
                                      0.004368502, 0.003070710, 0.002537909, 0.002785142,
                                      0.000429334, 0.002416008, 0.004218420, 0.003076757,
                                      0.004938699, 0.002167116, 0.006585847, 0.011300271,
                                      0.005295294, 0.004509998, 0.009405677, 0.009509083,
                                      0.008378039, 0.004325517, 0.009168914, 0.069410014,
                                      0.008416379, 0.009308074, 0.023906383, 0.011301246,
                                      0.007387887, 0.455746566, -0.012733152, -0.008795656,
                                      -0.011265772, 0.016834517, -0.007062686, 0.013425051,
                                      -0.007416634, -0.004214617, -0.003365760, 0.013468179,
                                      0.013929512, -0.002646222, 0.091612513, 0.014034620,
                                      -0.006738794, 0.004806105, -0.003948946, -0.004237689,
                                      0.000044541, -0.002322785, 0.013025926, 0.002785118,
                                      -0.002458262, -0.000334938, -0.001280732, 0.001868322,
                                      -0.000941466, 0.004280273, 0.001032238, 0.003767965,
                                      0.003287457, 0.005289058, 0.001212285, 0.143093802,
                                      0.017785762, 0.001947732, 0.028812589, -0.004225247,
                                      -0.005694654, 0.057873462, -0.002938893, -0.003443931,
                                      -0.002374265, -0.000529523, -0.000215951, 0.001262235,
                                      -0.001680847, 0.000775863, 0.132886848, 0.001570443,
                                      -0.003640201, -0.001528924, 0.001726264, -0.000325270,
                                      0.002797916, -0.001354589, 0.000885120, 0.003682012,
                                      0.001964884, 0.004136831, 0.001482581, 0.000637369,
                                      0.003491930, 0.012632634, 0.019999166, 0.139281667,
                                      0.014056370, 0.036869538, -0.005835004, 0.002561131,
                                      -0.001811502, 0.000912448, -0.001477008, 0.001054106,
                                      -0.001559508, -0.000316920, 0.007517156, 0.025162708,
                                      0.004258179, 0.003427051, 0.006176332, 0.004602519,
                                      0.009737985, 0.004112182, 0.004856389, 0.017348037,
                                      0.012624816, 0.007076025, 0.015860197, 0.008067491,
                                      0.015304197, 0.013287745, 0.010941661, 0.017291614,
                                      0.012860062, 0.014662762, 0.021470736, 0.089750888,
                                      0.029721387, 0.084422229, 0.025538049, 0.012954637,
                                      0.015186795, 0.014742261, 0.015065923, 0.041191490,
                                      0.017534406, 0.065615179, 0.042863807, 0.009824757,
                                      0.012811462, 0.012108715, 0.013738113, 0.017066297,
                                      0.020975496, 0.016770469, 0.020045512, 0.019226549,
                                      0.123542869, 0.029179979, 0.028041172, 0.030157531,
                                      0.026405102, 0.150062813, 0.041516788, 0.023581588,
                                      0.023982640, 0.020950110, 0.024592369, 0.067005727,
                                      0.032921671, 0.026174196, 0.019128032, 0.027213696,
                                      0.069347539, 0.023198247, 0.023452643, 0.021816970,
                                      0.026120696, 0.026877886, 0.035326087, 0.026665635,
                                      0.055879387, 0.030265407, 0.034954205, 0.059821483,
                                      0.036951272, 0.028938213, 0.030687105, 0.029515405,
                                      0.070262283, 0.031294484, 0.032695638, 0.033489140,
                                      0.043989322, 0.035771727, 0.037084614, 0.039078515,
                                      0.040736591, 0.046679125, 0.045157655, 0.052167138,
                                      0.082778914, 0.051092086, 0.058174728, 0.064483372,
                                      0.054513990, 0.054858841, 0.052581247, 0.060386350,
                                      0.078539244, 0.060863215, 0.055295817, 0.058955237,
                                      0.058195594, 0.063977765, 0.059473040, 0.066804131,
                                      0.074182369, 0.066984086, 0.070984434, 0.069437832,
                                      0.072397152, 0.094559245, 0.077566818, 0.076745069,
                                      0.078418504, 0.079242782, 0.083354656, 0.090229739,
                                      0.084194635, 0.086876792, 0.091849882, 0.094636944,
                                      0.257490827, 0.109991003, 0.124227705, 0.102241595,
                                      0.099291870, 0.101091816, 0.104942946, 0.100125528,
                                      0.107879059, 0.099497300, 0.101924759, 0.275707068,
                                      0.188527993, 0.114037650, 0.104318134, 0.100431925,
                                      0.103095883, 0.101276985, 0.099050097, 0.098439206,
                                      0.108578493, 0.104922385, 0.113257470, 0.112134531,
                                      0.110838854, 0.111759257, 0.111428091, 0.112249986,
                                      0.130468401, 0.118006338, 0.122105919, 0.117836526,
                                      0.122142900, 0.123127427, 0.126706601, 0.137384315,
                                      0.138063804, 0.170313039, 0.138585989, 0.133356562,
                                      0.141699698, 0.138456408, 0.178861721, 0.148465704,
                                      0.143215462, 0.145970401, 0.173263690, 0.147142035,
                                      0.153346997, 0.180826800, 0.158734737, 0.147171726,
                                      0.208154785, 0.159761561, 0.155139546, 0.218135913,
                                      0.155171530, 0.161127797, 0.159943997, 0.162085519,
                                      0.162588202, 0.215178441, 0.165683949, 0.214591930,
                                      0.200976120, 0.168269380, 0.163700580, 0.164054911,
                                      0.161812416, 0.168940340, 0.170923097, 0.167371306,
                                      0.184552353, 0.207196023, 0.193903741, 0.177629902,
                                      0.201315643, 0.177394915, 0.191724165, 0.209753866,
                                      0.184055592, 0.186679660, 0.199473670, 0.252362475,
                                      0.193247141, 0.190963249, 0.193290891, 0.192422885,
                                      0.198950601, 0.195924404, 0.201744870, 0.197107769,
                                      0.215971032, 0.204275171, 0.207786625, 0.212073084,
                                      0.208992457, 0.368954146, 0.228116936, 0.276780652,
                                      0.219981029, 0.220100667, 0.217154946, 0.223850628,
                                      0.222549948, 0.225256356, 0.225663463, 0.255035830,
                                      0.235005556, 0.233295307, 0.234970455, 0.233971877,
                                      0.237879369, 0.235562684, 0.242624975, 0.238936060,
                                      0.236485663, 0.253139152, 0.245685785, 0.245394456 };

   im.setup( 1, in_data.size() );
   //debug_level = 11;
   im.clock_charge( in_data );

   //for (unsigned int i=0;i<in_data.size();++i)
   //  std::cout << std::fixed << std::setprecision(9) << in_data[i] << ", ";
   //std::cout << std::endl;

   BOOST_CHECK_EQUAL( check_array( in_data, out_data, 1e-5), true );
}

BOOST_AUTO_TEST_SUITE_END()
