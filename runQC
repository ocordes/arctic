#!/bin/bash


# runQC
#
# runs some quality control tests for sonar
#
# written by: Oliver Cordes 2017-04-01
# changed by: Oliver Cordes 2017-06-22

DEBUG=1

# create the report directory
mkdir -p sonar

sonar_cxx_cppcheck_reportFile="sonar/sonar_cxx_cppcheck_report.xml"
sonar_cxx_vera_reportFile="sonar/sonar_cxx_vera_report.xml"
sonar_cxx_rats_reportFile="sonar/sonar_cxx_rats_report.xml"
sonar_cxx_coverage_reportFile="sonar/sonar_cxx_coverage_report.xml"
sonar_cxx_valgrind_reportFile="sonar/sonar_cxx_valgrind_report"

GCOVR_DIR=build.gcovr

# check for executables
CPPCHECK=`which cppcheck`
VERA=`which vera++`
RATS=`which rats`
GCOVR=`which gcovr`
VALGRIND=`which valgrind`

function runCppcheck
{
  rm -f $sonar_cxx_cppcheck_reportFile
  if [ ${CPPCHECK} ]; then
   if [ "$DEBUG" == "0" ]; then
     out="-q"
   else
     out=""
   fi
   #INCLUDES="-I /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1 \
   #           -I /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../lib/clang/8.0.0/include \
   #         -I /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/System/Library/Frameworks/Kernel.framework/Versions/A/Headers/machine/ \
   #           -I /usr/include -I /usr/local/include -I /Users/ocordes/git/arctic/build"
   INCLUDES="-I /usr/include -I /usr/include/c++/4.2.1 -I /usr/local/include -I /Users/ocordes/git/arctic/build"
   INCLUDES="-I /usr/local/include -I /Users/ocordes/git/arctic/build"
   cppcheck --force --xml --std=c++11  --enable=all --suppress=missingInclude src/ $out $INCLUDES 2> $sonar_cxx_cppcheck_reportFile
  fi
} # runCppcheck


function runVera++
{
  rm -f $sonar_cxx_vera_reportFile
  if [ ${VERA} ]; then
   export VERA_ROOT=/usr/local/lib/vera++

   #find src -regex ".*\.cc\|.*\.h" | vera++ -s -c $sonar_cxx_vera_reportFile
   find src  -type f | vera++ -s -c $sonar_cxx_vera_reportFile
  fi
} # runVera++


function runRats
{
  rm -f $sonar_cxx_rats_reportFile
  if [ ${RATS} ]; then
   rats -w 3 --xml src > $sonar_cxx_rats_reportFile
  fi
} # runrats


function runCppCoverage
{
  rm -f $sonar_cxx_coverage_reportFile

  if [ ${GCOVR} ]; then
   mkdir -p ${GCOVR_DIR}
   rm -rf ${GCOVR_DIR}/*

   (cd ${GCOVR_DIR}; cmake -DCOVERAGE=1 ..; make; make test )

   gcovr -r . --exclude '.*/unittests/.*' --xml -o $sonar_cxx_coverage_reportFile
 fi
}

function runValgrind
{
  rm -f ${sonar_cxx_valgrind_reportFile}*.xml

  if [ ${VALGRIND} ]; then
    if [ -d ${GCOVR_DIR} ]; then
      EXEs=`cd ${GCOVR_DIR}; find . -maxdepth 1 -type f -name "Boost*"`
      for i in ${EXEs}; do
        EXE=`basename ${i}`
        if [ -x ${GCOVR_DIR}/${EXE} ]; then
          ${VALGRIND} --leak-check=full --track-origins=yes --xml=yes --xml-file=${sonar_cxx_valgrind_reportFile}_${EXE}.xml ${GCOVR_DIR}/${EXE}
          #${VALGRIND} --leak-check=full --xml=yes --xml-file=${sonar_cxx_valgrind_reportFile}_${EXE}.xml ${GCOVR_DIR}/${EXE}
        fi
      done
    else
       echo "No executables for valgrind found."
    fi
  fi
}

# main

# doing some measurements
SECONDS=0

# run all commands

runCppcheck
runVera++
runRats
runCppCoverage
runValgrind

# finished!

duration=$SECONDS
echo "All tests don in $(($duration / 60)) minutes and $(($duration % 60)) seconds!"
